name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  server:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    env:
      APP_ENV: test

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: apt-get update
        run: sudo apt-get update -y

      - name: install uv
        uses: astral-sh/setup-uv@v5

      - name: set up python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: install
        run: bin/install-ci

      - name: lint
        run: bin/check

      - name: run postgres container
        run: |
          docker run --rm -d --name ci-postgres \
          -p 5432:5432 \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_DB=postgres_test \
          postgres:16.4

      - name: run migrations on test database
        run: bin/db-migrate

      - name: run tests
        run: bin/test

      - name: get branch names
        if: github.event_name == 'pull_request'
        id: branch-names
        run: |
          echo "head_ref=${{ github.head_ref }}" >> "$GITHUB_OUTPUT"
          echo "base_ref=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"

      - name: create db branch in neon for pull request
        id: create-db-branch
        if: github.event_name == 'pull_request'
        uses: neondatabase/create-branch-action@v6
        with:
          api_key: ${{ secrets.NEON_API_KEY }} # Generate an API key in your Neon account settings
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: ${{ steps.branch-names.outputs.head_ref }}
          parent_branch: ${{ steps.branch-names.outputs.base_ref }}

      - name: run migrations against preview
        if: github.event_name == 'pull_request'
        env:
          APP_POSTGRES_PWD: ${{ steps.create-db-branch.outputs.password }}
          APP_POSTGRES_HOST: ${{ steps.create-db-branch.outputs.db_host_pooled }}
          APP_POSTGRES_DATABASE: neondb
          APP_POSTGRES_USER: neondb_owner
          APP_ENV: preview
        run: bin/db-migrate

      - name: deploy to preview
        if: github.event_name == 'pull_request'
        env:
          MODAL_ENV: ${{ steps.branch-names.outputs.head_ref }}
          APP_POSTGRES_PWD: ${{ steps.create-db-branch.outputs.password }}
          APP_POSTGRES_HOST: ${{ steps.create-db-branch.outputs.db_host_pooled }}
          APP_POSTGRES_DATABASE: neondb
          APP_POSTGRES_USER: neondb_owner
          APP_ENV: preview
          APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
          APP_SENTRY_DSN: ${{ secrets.APP_SENTRY_DSN }}
          APP_LOGFIRE_TOKEN: ${{ secrets.APP_LOGFIRE_TOKEN }}
          APP_WEB_BASE_URL: https://${{ steps.branch-names.outputs.head_ref }}-cloudflare-modal-neon.personal-781.workers.dev
        run: |
          uv run modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}
          bin/deploy-modal

      - name: run migrations against production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          APP_POSTGRES_PWD: ${{ secrets.PROD_POSTGRES_PWD }}
          APP_POSTGRES_HOST: ${{ secrets.PROD_POSTGRES_HOST }}
          APP_POSTGRES_DATABASE: neondb
          APP_POSTGRES_USER: neondb_owner
          APP_ENV: production
        run: bin/db-migrate

      - name: deploy to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          MODAL_ENV: production
          APP_POSTGRES_PWD: ${{ secrets.PROD_POSTGRES_PWD }}
          APP_POSTGRES_HOST: ${{ secrets.PROD_POSTGRES_HOST }}
          APP_POSTGRES_DATABASE: neondb
          APP_POSTGRES_USER: neondb_owner
          APP_ENV: production
          APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
          APP_SENTRY_DSN: ${{ secrets.APP_SENTRY_DSN }}
          APP_LOGFIRE_TOKEN: ${{ secrets.APP_LOGFIRE_TOKEN }}
          APP_WEB_BASE_URL: cloudflare-modal-neon.personal-781.workers.dev
        run: |
          uv run modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}
          bin/deploy-modal

  web:
    needs: server

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web

    env:
      MODAL_PROFILE: anthonycorletti

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: apt-get update
        run: sudo apt-get update -y

      - name: setup bun
        uses: oven-sh/setup-bun@v2

      - name: install dependencies
        run: bun install

      - name: lint
        run: bun run lint

      # - name: run tests
      #   run: bun test

      - name: get api preview url
        if: github.event_name == 'pull_request'
        id: api-preview-url
        run: |
          echo "head_ref=${{ github.head_ref }}" >> "$GITHUB_OUTPUT"
          MODAL_ENV=$(echo "${{ github.head_ref }}" | tr -c '[:alnum:]\n' '-' | tr '[:upper:]' '[:lower:]')
          echo "MODAL_ENV=${MODAL_ENV}" >> "$GITHUB_OUTPUT"
          echo "url=https://${{ env.MODAL_PROFILE }}-${MODAL_ENV}--server.modal.run" >> "$GITHUB_OUTPUT"

      - name: deploy to preview
        if: github.event_name == 'pull_request'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          VITE_SERVER_BASE_URL: ${{ steps.api-preview-url.outputs.url }}
          MODAL_ENV: ${{ steps.api-preview-url.outputs.MODAL_ENV }}
        run: |
          bun run build
          bunx wrangler versions upload --preview-alias "${MODAL_ENV}" --var VITE_SERVER_BASE_URL:"${VITE_SERVER_BASE_URL}"

      - name: build and deploy to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          VITE_SERVER_BASE_URL: https://${{ env.MODAL_PROFILE }}-production--server.modal.run
        run: |
          bun run build
          bunx wrangler pages deploy --var VITE_SERVER_BASE_URL:"${VITE_SERVER_BASE_URL}"
