name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  server:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    env:
      APP_ENV: test
      NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}

    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: apt-get update
        run: sudo apt-get update -y

      - name: install uv
        uses: astral-sh/setup-uv@v5

      - name: setup bun
        uses: oven-sh/setup-bun@v2

      - name: install neonctl
        run: |
          bun install -g neonctl

      - name: set up python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: install
        run: bin/install-ci

      - name: lint
        run: bin/check

      - name: run postgres container
        run: |
          docker run --rm -d --name ci-postgres \
          -p 5432:5432 \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_DB=postgres_test \
          postgres:16.4

      - name: run migrations on test database
        run: bin/db-migrate

      - name: run tests
        run: bin/test

      - name: get branch names
        if: github.event_name == 'pull_request'
        id: branch-names
        run: |
          echo "::set-output name=current_branch::${{ github.ref_name }}"
          echo "::set-output name=base_branch::${{ github.base_ref_name }}"

      - name: create db branch in neon for pull request
        id: create-db-branch
        if: github.event_name == 'pull_request'
        uses: neondatabase/create-branch-action@v5
        with:
          username: "anthonycorletti" # Change this to the role you use to connect to your database
          api_key: ${{ secrets.NEON_API_KEY }} # Generate an API key in your Neon account settings
          project_id: ${{ env.NEON_PROJECT_ID }}
          branch_name: ${{ steps.branch-name.outputs.current_branch }}
          parent_branch: ${{ steps.branch-name.outputs.base_branch }}

      - name: run migrations against preview
        if: github.event_name == 'pull_request'
        run: |
          APP_POSTGRES_PWD=${{ steps.create-db-branch.outputs.password }} APP_POSTGRES_HOST=${{ steps.create-db-branch.outputs.db_host }} APP_ENV=preview bin/db-migrate

      - name: deploy to preview
        if: github.event_name == 'pull_request'
        run: |
          APP_ENV=preview bin/deploy-modal

      - name: run migrations against production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          APP_POSTGRES_PWD=${{ secrets.PROD_POSTGRES_PWD }} APP_POSTGRES_HOST=${{ secrets.PROD_POSTGRES_HOST }} APP_ENV=production bin/db-migrate

      - name: deploy to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          APP_ENV=production bin/deploy-modal

  web:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: apt-get update
        run: sudo apt-get update -y

      - name: setup bun
        uses: oven-sh/setup-bun@v2

      - name: install dependencies
        run: bun install

      - name: lint
        run: bun run lint

      - name: run tests
        run: bun test

      - name: build
        run: bun run build
